Index: ../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/scrapers/generic/FoodStuffsScraper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cosc345.scraper.scrapers.generic\r\n\r\nimport com.example.cosc345.scraper.api.FoodStuffsApi\r\nimport com.example.cosc345.scraper.interfaces.Scraper\r\nimport com.example.cosc345.scraper.models.ScraperResult\r\nimport com.example.cosc345.scraper.models.foodstuffs.FoodStuffsSearchRequest\r\nimport com.example.cosc345.scraper.models.foodstuffs.promotions.FoodStuffsPromotion\r\nimport com.example.cosc345.scraper.models.foodstuffs.token.FoodStuffsRefreshTokenRequest\r\nimport com.example.cosc345.shared.models.*\r\n\r\n/**\r\n * A generic scraper that scrapes from FoodStuffs based stores (for example, New World or PAK'nSAVE).\r\n *\r\n * # Process\r\n * Firstly, an access token must be requested in order to query a list of stores. This refresh token must be provided to the scraper.\r\n *\r\n * Once this token is retrieved, the list of stores can be retrieved. Then the list of categories is requested.\r\n *\r\n * For each top-level category a list of products is requested. If the top-level category contains more than 1000 products (a hard limit imposed by FoodStuffs), then the sub-categories for that particular category will be used instead.\r\n *\r\n * Each product is processed to extract all information from the structure, along with cleaning up the names where required, and is added to a list to check for promotions.\r\n *\r\n * As some promotions, such a club promotions for New World, are not included in the overall products request, there has to be specific requests made to find the promotions going on at particular stores. Therefore, for each category, and for each store, a request to the promotions API is made, to find out what promotions are currently active for all of the products.\r\n *\r\n * The stores and products and then passed back to the scraper implementation.\r\n *\r\n * @param id The ID of the retailer that should be used.\r\n * @param retailer The retailer that the stores should be added to.\r\n * @param productsIndex The URL path parameter that specifies which Agoria (the search engine used by FoodStuffs) index should be queried for the products request.\r\n * @param categoriesIndex The URL path parameter that specific which Agoria index should be queried for the categories request.\r\n * @param refreshToken The refresh token to use to generate an access token.\r\n * @param storeWhiteList The stores we should download data for, as the app is currently region locked.\r\n *\r\n * @author Shea Smith\r\n * @constructor Create a new instance of this scraper, for the retailer specified in the constructor.\r\n */\r\nabstract class FoodStuffsScraper(\r\n    private val id: String,\r\n    private val retailer: Retailer,\r\n    private val productsIndex: String,\r\n    private val categoriesIndex: String,\r\n    private val refreshToken: String,\r\n    private val storeWhiteList: Array<String>\r\n) : Scraper() {\r\n    override suspend fun runScraper(): ScraperResult {\r\n        val foodStuffsService =\r\n            generateJsonRequest(FoodStuffsApi::class.java, \"https://api-prod.prod.fsniwaikato.kiwi\")\r\n\r\n        val products = mutableListOf<RetailerProductInformation>()\r\n\r\n        val token =\r\n            foodStuffsService.refreshToken(FoodStuffsRefreshTokenRequest(refreshToken)).accessToken\r\n\r\n        val foodStuffsStores = foodStuffsService.getStores(\"Bearer $token\").stores.filter {\r\n            storeWhiteList.contains(it.name)\r\n        }\r\n\r\n        val stores = foodStuffsStores.map {\r\n            Store(\r\n                id = it.id,\r\n                name = it.name.replace(retailer.name!!, \"\").trim(),\r\n                address = it.address,\r\n                latitude = it.latitude,\r\n                longitude = it.longitude,\r\n                automated = true\r\n            )\r\n        }\r\n\r\n        val allCategories = foodStuffsService.getCategories(\r\n            categoriesIndex,\r\n            FoodStuffsSearchRequest(facetFilters = arrayOf())\r\n        ).categories\r\n\r\n        val foodStuffsCategories = allCategories.filter { it.level == 1 }.toMutableList()\r\n\r\n        var i = 0\r\n        while (i < foodStuffsCategories.size) {\r\n            val foodStuffsCategory = foodStuffsCategories[i]\r\n            i++\r\n\r\n            val response = foodStuffsService.getProducts(\r\n                productsIndex, FoodStuffsSearchRequest(\r\n                    facetFilters = arrayOf(\r\n                        arrayOf(\"category${foodStuffsCategory.level}:${foodStuffsCategory.categoryId}\")\r\n                    )\r\n                )\r\n            )\r\n\r\n            // We have greater than or equal to 1000 results, so some have been truncated. We therefore have to search on subcategories instead.\r\n            if (response.numberOfResults >= 1000) {\r\n\r\n                foodStuffsCategories.addAll(allCategories.filter {\r\n                    foodStuffsCategory.childrenCategories.contains(\r\n                        it.id\r\n                    )\r\n                })\r\n                continue\r\n            }\r\n\r\n            val productDiscountsToCheck = mutableMapOf<String, MutableList<String>>()\r\n\r\n            response.products.filter { foodStuffsProduct -> products.none { it.id == foodStuffsProduct.productId } }\r\n                .forEach { foodStuffsProduct ->\r\n                    val product = RetailerProductInformation(\r\n                        retailer = id,\r\n                        id = foodStuffsProduct.productId,\r\n                        name = foodStuffsProduct.name,\r\n                        brandName = foodStuffsProduct.brand,\r\n                        saleType = if (foodStuffsProduct.saleType != \"UNITS\") SaleType.WEIGHT else SaleType.EACH,\r\n                        weight = if (foodStuffsProduct.saleType != \"UNITS\") 1000 else null,\r\n                        quantity = if (foodStuffsProduct.saleType == \"UNITS\") foodStuffsProduct.netContentDisplay else null,\r\n                        image = \"https://a.fsimg.co.nz/product/retail/fan/image/500x500/${\r\n                            foodStuffsProduct.productId.split(\r\n                                \"-\"\r\n                            )[0]\r\n                        }.png\",\r\n                        automated = true,\r\n                        verified = false\r\n                    )\r\n\r\n                    if (foodStuffsProduct.barcodes.isNotBlank()) {\r\n                        val barcodes =\r\n                            foodStuffsProduct.barcodes.split(\",\").filter { it.length > 7 }\r\n                        product.barcodes = barcodes\r\n                    }\r\n\r\n                    if (product.weight == null) {\r\n                        var weight = foodStuffsProduct.netContent?.toDouble()\r\n\r\n                        if (foodStuffsProduct.netContentUnit == Units.KILOGRAMS.toString()) {\r\n                            weight = weight?.times(1000)\r\n                            product.weight = weight?.toInt()\r\n                        } else if (foodStuffsProduct.netContentUnit == Units.GRAMS.toString()) {\r\n                            product.weight = weight?.toInt()\r\n                        }\r\n                    }\r\n\r\n                    val prices =\r\n                        foodStuffsProduct.prices.filter { price -> foodStuffsStores.any { it.idWithoutDashes == price.key } }\r\n\r\n                    if (prices.isNotEmpty()) {\r\n                        val discountsToCheck =\r\n                            foodStuffsProduct.promotionStart.keys.filter { discountStore -> foodStuffsStores.any { it.id == discountStore } }\r\n\r\n                        discountsToCheck.forEach {\r\n                            if (!productDiscountsToCheck.containsKey(it))\r\n                                productDiscountsToCheck[it] = mutableListOf()\r\n\r\n                            productDiscountsToCheck[it]?.add(foodStuffsProduct.productId)\r\n                        }\r\n\r\n                        product.pricing = prices.map { priceMap ->\r\n                            StorePricingInformation(\r\n                                store = foodStuffsStores.first { it.idWithoutDashes == priceMap.key }.id,\r\n                                price = priceMap.value.toDouble().times(100).toInt(),\r\n                                automated = true,\r\n                                verified = false\r\n                            )\r\n                        }.toMutableList()\r\n                    }\r\n\r\n                    if (product.pricing != null)\r\n                        products.add(product)\r\n                }\r\n\r\n            productDiscountsToCheck.forEach { discountMap ->\r\n                foodStuffsService.getPromotions(\r\n                    discountMap.key,\r\n                    discountMap.value.joinToString(\",\")\r\n                ).promotions.forEach { foodStuffsPromotion ->\r\n\r\n                    val price =\r\n                        products.first { it.id == foodStuffsPromotion.productId }.pricing!!.first { it.store == discountMap.key }\r\n\r\n                    parsePromotion(foodStuffsPromotion, price, false)\r\n                }\r\n            }\r\n        }\r\n\r\n        retailer.stores = stores\r\n\r\n        return ScraperResult(retailer, products, id)\r\n    }\r\n\r\n    /**\r\n     * Parse a promotion, and apply that promotion to a price object.\r\n     */\r\n    private fun parsePromotion(\r\n        promotion: FoodStuffsPromotion,\r\n        price: StorePricingInformation,\r\n        clubOnly: Boolean\r\n    ) {\r\n        if (promotion.price != 0.0 && promotion.quantity == 1) {\r\n            price.discountPrice = promotion.price.times(100).toInt()\r\n\r\n            if (price.price == price.discountPrice) {\r\n                price.price = null\r\n            }\r\n        } else if (promotion.quantity > 1) {\r\n            price.multiBuyQuantity = promotion.quantity\r\n            price.multiBuyPrice = promotion.price.times(100).toInt()\r\n        }\r\n\r\n        if (promotion.price != 0.0) {\r\n            price.clubOnly = clubOnly\r\n        }\r\n\r\n        if (promotion.loyaltyPromotion != null) {\r\n            parsePromotion(promotion.loyaltyPromotion, price, true)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/scrapers/generic/FoodStuffsScraper.kt b/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/scrapers/generic/FoodStuffsScraper.kt
--- a/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/scrapers/generic/FoodStuffsScraper.kt	(revision 140d0b7687fe1edefef8762b863d3afcd91e0609)
+++ b/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/scrapers/generic/FoodStuffsScraper.kt	(date 1662463694213)
@@ -170,7 +170,7 @@
                 ).promotions.forEach { foodStuffsPromotion ->
 
                     val price =
-                        products.first { it.id == foodStuffsPromotion.productId }.pricing!!.first { it.store == discountMap.key }
+                        products.first { it.id == foodStuffsPromotion.productId || it.id == foodStuffsPromotion.loyaltyPromotion?.productId }.pricing!!.first { it.store == discountMap.key }
 
                     parsePromotion(foodStuffsPromotion, price, false)
                 }
Index: ../api/src/main/kotlin/nz/shea/discountdetective/api/ApiApplication.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nz.shea.discountdetective.api\r\n\r\nimport com.example.cosc345.shared.models.Product\r\nimport com.example.cosc345.shared.models.Retailer\r\nimport nz.shea.discountdetective.api.data.PageDTO\r\nimport nz.shea.discountdetective.api.services.ProductService\r\nimport nz.shea.discountdetective.api.services.RetailerService\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication\r\nimport org.springframework.boot.runApplication\r\nimport org.springframework.web.bind.annotation.GetMapping\r\nimport org.springframework.web.bind.annotation.PathVariable\r\nimport org.springframework.web.bind.annotation.RequestMapping\r\nimport org.springframework.web.bind.annotation.RequestParam\r\nimport org.springframework.web.bind.annotation.RestController\r\n\r\n@SpringBootApplication\r\nclass ApiApplication\r\n\r\nfun main(args: Array<String>) {\r\n\trunApplication<ApiApplication>(*args)\r\n}\r\n\r\n@RestController\r\n@RequestMapping(\"/products\")\r\nclass ProductResource(val service: ProductService, val component: ScraperTask) {\r\n\t@RequestMapping(\"/search\")\r\n\tfun search(query: String, offset: Int = 0): PageDTO<Map<String, Product>> {\r\n\t\treturn service.searchProducts(query, offset)\r\n\t}\r\n\r\n\t@RequestMapping(\"/{id}\")\r\n\tfun getProduct(@PathVariable(\"id\") id: String): Product? {\r\n\t\treturn service.findById(id)\r\n\t}\r\n\r\n\t@RequestMapping(\"/run-scraper\")\r\n\tfun runScraper() {\r\n\t\tcomponent.runScrapers()\r\n\t}\r\n}\r\n\r\n@RestController\r\n@RequestMapping(\"/retailers\")\r\nclass RetailerResource(val service: RetailerService) {\r\n\t@RequestMapping(\"/\")\r\n\t@GetMapping\r\n\tfun index(): Map<String, Retailer> = service.findRetailers()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../api/src/main/kotlin/nz/shea/discountdetective/api/ApiApplication.kt b/../api/src/main/kotlin/nz/shea/discountdetective/api/ApiApplication.kt
--- a/../api/src/main/kotlin/nz/shea/discountdetective/api/ApiApplication.kt	(revision 140d0b7687fe1edefef8762b863d3afcd91e0609)
+++ b/../api/src/main/kotlin/nz/shea/discountdetective/api/ApiApplication.kt	(date 1662461431631)
@@ -7,6 +7,7 @@
 import nz.shea.discountdetective.api.services.RetailerService
 import org.springframework.boot.autoconfigure.SpringBootApplication
 import org.springframework.boot.runApplication
+import org.springframework.web.bind.annotation.CrossOrigin
 import org.springframework.web.bind.annotation.GetMapping
 import org.springframework.web.bind.annotation.PathVariable
 import org.springframework.web.bind.annotation.RequestMapping
@@ -22,6 +23,7 @@
 
 @RestController
 @RequestMapping("/products")
+@CrossOrigin(origins = ["http://localhost:8081", "http://localhost:8080"])
 class ProductResource(val service: ProductService, val component: ScraperTask) {
 	@RequestMapping("/search")
 	fun search(query: String, offset: Int = 0): PageDTO<Map<String, Product>> {
@@ -41,6 +43,7 @@
 
 @RestController
 @RequestMapping("/retailers")
+@CrossOrigin(origins = ["http://localhost:8081", "http://localhost:8080"])
 class RetailerResource(val service: RetailerService) {
 	@RequestMapping("/")
 	@GetMapping
Index: ../api/src/main/kotlin/nz/shea/discountdetective/api/services/ProductService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nz.shea.discountdetective.api.services\r\n\r\nimport com.example.cosc345.shared.models.Product\r\nimport nz.shea.discountdetective.api.data.PageDTO\r\nimport nz.shea.discountdetective.api.data.StorageProduct\r\nimport nz.shea.discountdetective.api.repositories.ProductRepository\r\nimport org.hibernate.search.engine.search.query.SearchResult\r\nimport org.hibernate.search.mapper.orm.Search\r\nimport org.springframework.stereotype.Service\r\nimport javax.persistence.EntityManager\r\nimport kotlin.jvm.optionals.getOrNull\r\n\r\n\r\n@Service\r\nclass ProductService(private val db: ProductRepository, private val entityManager: EntityManager) {\r\n    fun searchProducts(query: String, offset: Int): PageDTO<Map<String, Product>> {\r\n        val searchSession = Search.session(entityManager)\r\n\r\n        val result: SearchResult<StorageProduct> = searchSession\r\n            .search(StorageProduct::class.java)\r\n            .where { f -> f.match().fields(\"information.name\").matching(query).fuzzy(2) }\r\n            .fetch(offset, 30) as SearchResult<StorageProduct>\r\n\r\n        return PageDTO(result.hits().associate { it.toProduct() }, result.total().hitCount())\r\n    }\r\n\r\n    @OptIn(ExperimentalStdlibApi::class)\r\n    fun findById(id: String): Product? = db.findById(id).getOrNull()?.toProduct()?.second\r\n    //= db.searchProducts(query)\r\n\r\n    fun addAll(products: Map<String, Product>) =\r\n        db.saveAll(products.map { StorageProduct(it.value, it.key) })\r\n\r\n    fun deleteAll() = db.deleteAll()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../api/src/main/kotlin/nz/shea/discountdetective/api/services/ProductService.kt b/../api/src/main/kotlin/nz/shea/discountdetective/api/services/ProductService.kt
--- a/../api/src/main/kotlin/nz/shea/discountdetective/api/services/ProductService.kt	(revision 140d0b7687fe1edefef8762b863d3afcd91e0609)
+++ b/../api/src/main/kotlin/nz/shea/discountdetective/api/services/ProductService.kt	(date 1662463274235)
@@ -8,20 +8,37 @@
 import org.hibernate.search.mapper.orm.Search
 import org.springframework.stereotype.Service
 import javax.persistence.EntityManager
+import javax.persistence.TypedQuery
 import kotlin.jvm.optionals.getOrNull
 
 
 @Service
 class ProductService(private val db: ProductRepository, private val entityManager: EntityManager) {
     fun searchProducts(query: String, offset: Int): PageDTO<Map<String, Product>> {
-        val searchSession = Search.session(entityManager)
+        val total: Long
+        val products: Map<String, Product>
+
+        if (query.isNotBlank()) {
+            val searchSession = Search.session(entityManager)
 
-        val result: SearchResult<StorageProduct> = searchSession
-            .search(StorageProduct::class.java)
-            .where { f -> f.match().fields("information.name").matching(query).fuzzy(2) }
-            .fetch(offset, 30) as SearchResult<StorageProduct>
+            val result: SearchResult<StorageProduct> = searchSession
+                .search(StorageProduct::class.java)
+                .where { f -> f.match().fields("information.name").matching(query).fuzzy(2) }
+                .fetch(offset, 30) as SearchResult<StorageProduct>
 
-        return PageDTO(result.hits().associate { it.toProduct() }, result.total().hitCount())
+            products = result.hits().associate { it.toProduct() }
+            total = result.total().hitCount()
+        } else {
+            val query: TypedQuery<StorageProduct> =
+                entityManager.createQuery("SELECT p FROM StorageProduct p ORDER BY p.id", StorageProduct::class.java)
+            query.firstResult = offset
+            query.maxResults = 30
+
+            products = query.resultList.associate { it.toProduct() }
+            total = db.count()
+        }
+
+        return PageDTO(products, total)
     }
 
     @OptIn(ExperimentalStdlibApi::class)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AndroidLayouts\">\r\n    <shared>\r\n      <config />\r\n    </shared>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3c812e9e-fe30-4663-bc3a-87515585e745\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/models/PageDto.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../create-api-vm.sh\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../create-api-vm.sh\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../update-api-vm.sh\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../update-api-vm.sh\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/Navigation.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/Navigation.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/AsyncImage.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/AsyncImage.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/search/SearchProductCard.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/search/SearchProductCard.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/search/SearchTopAppBar.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/search/SearchTopAppBar.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/ProductRepository.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/ProductRepository.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/RepositoryBase.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/RepositoryBase.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/RetailerRepository.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/RetailerRepository.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/screens/ProductScreen.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/screens/ProductScreen.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/screens/SearchScreen.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/screens/SearchScreen.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/viewmodels/ProductViewModel.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/viewmodels/ProductViewModel.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/viewmodels/SearchViewModel.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/viewmodels/SearchViewModel.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/jsMain/kotlin/main.js.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/jsMain/kotlin/main.js.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/multiplatform/src/jsMain/resources/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/multiplatform/src/jsMain/resources/index.html\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"DiscountDetective\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"DiscountDetective\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"DiscountDetective\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"kotlin browser\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Kotlin Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2EKsJRrAsyYiU3zfSsCQe0GpPJm\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.cidr.known.project.marker\" value=\"true\" />\r\n    <property name=\"cidr.known.project.marker\" value=\"true\" />\r\n    <property name=\"dart.analysis.tool.window.visible\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/models\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"project.propVCSSupport.DirectoryMappings\" />\r\n    <property name=\"show.migrate.to.gradle.popup\" value=\"false\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Development\\discount-detective-web\\web\\multiplatform\\src\\commonMain\\kotlin\\models\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n      <recent name=\"$PROJECT_DIR$/..\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Gradle.web [jsBrowserRun]\">\r\n    <configuration name=\"multiplatform\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\">\r\n      <module name=\"DiscountDetective.multiplatform.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"INSPECTION_WITHOUT_ACTIVITY_RESTART\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Hybrid>\r\n      <Java />\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n        <option name=\"PROFILING_MODE\" value=\"NOT_SET\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"web [jsBrowserRun]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"jsBrowserRun\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.web [jsBrowserRun]\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3c812e9e-fe30-4663-bc3a-87515585e745\" name=\"Changes\" comment=\"\" />\r\n      <created>1662355539081</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1662355539081</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$\" />\r\n    </ignored-roots>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 140d0b7687fe1edefef8762b863d3afcd91e0609)
+++ b/.idea/workspace.xml	(date 1662546312021)
@@ -10,23 +10,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="3c812e9e-fe30-4663-bc3a-87515585e745" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/models/PageDto.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../create-api-vm.sh" beforeDir="false" afterPath="$PROJECT_DIR$/../create-api-vm.sh" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../update-api-vm.sh" beforeDir="false" afterPath="$PROJECT_DIR$/../update-api-vm.sh" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/models/foodstuffs/promotions/FoodStuffsPromotion.kt" beforeDir="false" afterPath="$PROJECT_DIR$/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/models/foodstuffs/promotions/FoodStuffsPromotion.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/scrapers/generic/FoodStuffsScraper.kt" beforeDir="false" afterPath="$PROJECT_DIR$/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/scrapers/generic/FoodStuffsScraper.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../api/src/main/kotlin/nz/shea/discountdetective/api/ApiApplication.kt" beforeDir="false" afterPath="$PROJECT_DIR$/../api/src/main/kotlin/nz/shea/discountdetective/api/ApiApplication.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../api/src/main/kotlin/nz/shea/discountdetective/api/services/ProductService.kt" beforeDir="false" afterPath="$PROJECT_DIR$/../api/src/main/kotlin/nz/shea/discountdetective/api/services/ProductService.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/Navigation.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/Navigation.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/AsyncImage.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/AsyncImage.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/search/SearchProductCard.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/search/SearchProductCard.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/search/SearchTopAppBar.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/components/search/SearchTopAppBar.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/ProductRepository.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/ProductRepository.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/RepositoryBase.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/RepositoryBase.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/RetailerRepository.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/repository/RetailerRepository.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/screens/ProductScreen.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/screens/ProductScreen.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/screens/SearchScreen.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/screens/SearchScreen.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/viewmodels/ProductViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/viewmodels/ProductViewModel.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/viewmodels/SearchViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/commonMain/kotlin/viewmodels/SearchViewModel.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/jsMain/kotlin/main.js.kt" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/jsMain/kotlin/main.js.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/multiplatform/src/jsMain/resources/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/multiplatform/src/jsMain/resources/index.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
Index: ../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/models/foodstuffs/promotions/FoodStuffsPromotion.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cosc345.scraper.models.foodstuffs.promotions\r\n\r\nimport com.squareup.moshi.Json\r\nimport com.squareup.moshi.JsonClass\r\n\r\n/**\r\n * A promotion that exists on a particular product.\r\n *\r\n * @author Shea Smith\r\n * @constructor Create a new instance of this object. This should only be used by Moshi.\r\n */\r\n@JsonClass(generateAdapter = true)\r\ndata class FoodStuffsPromotion(\r\n    /**\r\n     * The ID of the product that has the promotion is being run on.\r\n     */\r\n    @Json(name = \"productId\")\r\n    val productId: String,\r\n\r\n    /**\r\n     * The price on promotion of this product.\r\n     */\r\n    @Json(name = \"price\")\r\n    val price: Double,\r\n\r\n    /**\r\n     * The quantity of this product that is being promoted, this is usually 1 for a standard promotion, or higher for a multi-buy discount (for example, 2 for $5).\r\n     */\r\n    @Json(name = \"quantity\")\r\n    val quantity: Int,\r\n\r\n    /**\r\n     * A promotion that is only available to club members.\r\n     */\r\n    @Json(name = \"loyalty\")\r\n    val loyaltyPromotion: FoodStuffsPromotion?\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/models/foodstuffs/promotions/FoodStuffsPromotion.kt b/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/models/foodstuffs/promotions/FoodStuffsPromotion.kt
--- a/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/models/foodstuffs/promotions/FoodStuffsPromotion.kt	(revision 140d0b7687fe1edefef8762b863d3afcd91e0609)
+++ b/../api/android-app/scraper/src/main/java/com/example/cosc345/scraper/models/foodstuffs/promotions/FoodStuffsPromotion.kt	(date 1662463678335)
@@ -15,7 +15,7 @@
      * The ID of the product that has the promotion is being run on.
      */
     @Json(name = "productId")
-    val productId: String,
+    val productId: String?,
 
     /**
      * The price on promotion of this product.
